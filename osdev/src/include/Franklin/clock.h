#ifndef CLOCK_H_
#define CLOCK_H_

#include <Franklin/datatype.h>
#include <Franklin/interrupt.h>

// 这里定义时间片的大小（ms为单位）以及转换后的频率
#define FREQUENCY 1193182 // 1秒跳1193182
#define TIME_SLICE 10 // ms 时间片最大为54ms
#define COUNT_VALUE (TIME_SLICE*(FREQUENCY/1000)) // 这里的频率算出来为11930 最大计数值65535

/*
    1. 0x40 - 计数器0（Counter 0）
    这是定时器的计数器0的端口，用于读写计数器0的值。
    计数器0通常用于系统定时器（例如，生成定时中断）。
    写入时，数据会被加载到计数器0的计数寄存器。
    读取时，返回计数器0的当前值。

    2. 0x41 - 计数器1（Counter 1）
    这是定时器的计数器1的端口，用于读写计数器1的值。
    计数器1通常用于其他用途（例如，DRAM刷新）。
    写入时，数据会被加载到计数器1的计数寄存器。
    读取时，返回计数器1的当前值。

    3. 0x42 - 计数器2（Counter 2）
    这是定时器的计数器2的端口，用于读写计数器2的值。
    计数器2通常用于生成音频信号（例如，PC扬声器）。
    写入时，数据会被加载到计数器2的计数寄存器。
    读取时，返回计数器2的当前值。

    4. 0x43 - 控制字寄存器（Control Word Register）
    这是定时器的控制端口，用于配置定时器的工作模式。
    向该端口写入一个控制字，可以设置计数器的工作模式、读写顺序、计数格式等。
    控制字的格式如下：
    Bit 7-6: 选择计数器（00 = 计数器0，01 = 计数器1，10 = 计数器2）。
    Bit 5-4: 读写顺序（00 = 锁存计数器值，01 = 只读写高字节，10 = 只读写低字节，11 = 先低字节后高字节）。
    Bit 3-1: 工作模式（000-111，共6种模式，例如模式3 = 方波发生器）。
    Bit 0: 计数格式（0 = 二进制，1 = BCD码）。
    
    模式	名称	行为特点	用途
    0	中断信号发生器	计数到0时输出高电平，保持高电平	单次定时或事件计数
    1	可编程单稳态触发器	外部触发后输出低电平，计数到0时恢复高电平	单脉冲信号
    2	速率发生器	周期性脉冲信号，频率为输入时钟除以初始值	周期性中断或时钟信号
    3	方波发生器	对称方波信号，占空比50%（偶数初始值）	系统定时器（IRQ0中断）
    4	软件触发脉冲	写入初始值后计数到0时输出一个时钟周期的低电平	单次脉冲信号
    5	硬件触发脉冲	外部触发后计数到0时输出一个时钟周期的低电平	外部事件触发的单次脉冲
*/

/*
    端口0x61的其他位
    端口0x61是一个多功能端口，除了控制计数器0的GATE引脚外，还控制其他硬件功能。以下是端口0x61的位定义：
    Bit	功能
    0	计数器0的GATE引脚（0 = 停止计数，1 = 启动计数）
    1	计数器1的GATE引脚（通常用于DRAM刷新）
    2	计数器2的GATE引脚（通常用于PC扬声器）
    3	保留
    4	扬声器数据使能（0 = 禁用，1 = 启用）
    5	扬声器定时器使能（0 = 禁用，1 = 启用）
    6	键盘控制器输出缓冲状态（0 = 空，1 = 满）
    7	键盘控制器输入缓冲状态（0 = 空，1 = 满）

*/

#endif
